name: Deploy NestJS App to Docker

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Ensure we don't have concurrent deployments for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.12]

    steps:
      # Ã‰tape 1 : Checkout du code source
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      # Ã‰tape 2 : Installer Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Ã‰tape 3 : Installer PNPM
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      # Ã‰tape 4 : RÃ©cupÃ©rer le cache des dÃ©pendances
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Installation des dÃ©pendances
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # GÃ©nÃ©ration du client Prisma
      - name: Generate Prisma client
        run: pnpm prisma:generate

      # Audit de sÃ©curitÃ©
      - name: Audit
        run: pnpm audit || true

      # VÃ©rification de la signature des audits
      - name: Audit Signature
        run: pnpm audit signatures || true

      # Lint
      - name: Lint
        run: pnpm lint || true

      # Build
      - name: Build
        run: |
          export NODE_ENV=production
          pnpm run build
          mkdir -p dist/src/mail/templates
          cp -r src/mail/templates dist/src/mail/

      # Ã‰tape 5 : Configurer Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Ã‰tape 6 : RÃ©cupÃ©rer le cache Docker
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Ã‰tape 7 : Connexion Ã  Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Ã‰tape 8 : Construire et pousser l'image Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/portfolio-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/portfolio-backend:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Ã‰tape 9 : DÃ©placer le cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Ã‰tape 10 : CrÃ©er un rÃ©sumÃ© du dÃ©ploiement
      - name: Create Deployment Summary
        if: always()
        run: |
          echo "# Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "* **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "* **Docker Image**: ${{ secrets.DOCKER_USERNAME }}/portfolio-backend:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

      # Ã‰tape 11 : Notification de dÃ©ploiement Discord
      - name: Deployment Notification to Discord
        if: always()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          JOB_STATUS: ${{ job.status }}
          REPO: ${{ github.repository }}
          REF: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
        run: |
          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            curl -H "Content-Type: application/json" \
              -X POST \
              -d '{
                "username": "GitHub Actions",
                "embeds": [{
                  "title": "ðŸš€ DÃ©ploiement Portfolio Backend",
                  "color": '"$(if [ "$JOB_STATUS" = "success" ]; then echo 3066993; else echo 15158332; fi)"',
                  "fields": [
                    {"name": "ðŸ“¦ Repository", "value": "'"$REPO"'", "inline": true},
                    {"name": "ðŸŒ¿ Branch", "value": "'"$REF"'", "inline": true},
                    {"name": "ðŸ”– Commit", "value": "'"$SHA"'", "inline": false},
                    {"name": "ðŸ‘¤ DÃ©clenchÃ© par", "value": "'"$ACTOR"'", "inline": true},
                    {"name": "ðŸ“Š Statut", "value": "'"$JOB_STATUS"'", "inline": true}
                  ],
                  "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
                }]
              }' \
              "$DISCORD_WEBHOOK_URL"
          else
            echo "ðŸ”• Aucun webhook Discord configurÃ©."
          fi
      
