name: Workflow NestJS

on:
  push:
    branches: [master]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [20.12]

    steps:
      - name: âœ… DÃ©marrage
        run: echo "Lancement du dÃ©ploiement..."

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma client
        run: pnpm prisma:generate

      - name: Audit
        run: pnpm audit || true

      - name: Audit Signature
        run: pnpm audit signatures || true

      - name: Lint
        run: pnpm lint || true

      - name: Build
        run: |
          export NODE_ENV=production
          pnpm run build
          mkdir -p dist/src/features/contact/mail/templates
          cp -r src/features/contact/mail/templates dist/src/features/contact/mail/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/portfolio-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/portfolio-backend:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Create Deployment Summary
        if: always()
        run: |
          echo "# Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "* **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "* **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "* **Docker Image**: ${{ secrets.DOCKER_USERNAME }}/portfolio-backend:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

      - name: Deployment Notification to Discord
        if: always()
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          JOB_STATUS: ${{ job.status }}
          REPO: ${{ github.repository }}
          REF: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
        run: |
          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            # Validate webhook URL format
            if [[ "$DISCORD_WEBHOOK_URL" =~ ^https://discord\.com/api/webhooks/ ]]; then
              COLOR=$(if [ "$JOB_STATUS" = "success" ]; then echo 3066993; else echo 15158332; fi)
              TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
              JSON='{"username":"GitHub Actions","embeds":[{"title":"ðŸš€ DÃ©ploiement Portfolio Backend","color":'$COLOR',"fields":[{"name":"ðŸ“¦ Repository","value":"'$REPO'","inline":true},{"name":"ðŸŒ¿ Branch","value":"'$REF'","inline":true},{"name":"ðŸ”– Commit","value":"'$SHA'","inline":false},{"name":"ðŸ‘¤ DÃ©clenchÃ© par","value":"'$ACTOR'","inline":true},{"name":"ðŸ“Š Statut","value":"'$JOB_STATUS'","inline":true}],"timestamp":"'$TIMESTAMP'"}]}'
              # Use --url option for better URL handling
              curl --url "$DISCORD_WEBHOOK_URL" -H "Content-Type: application/json" -X POST -d "$JSON" || echo "Failed to send Discord notification"
            else
              echo "Invalid Discord webhook URL format. Must start with https://discord.com/api/webhooks/"
            fi
          else
            echo "ðŸ”• Aucun webhook Discord configurÃ©."
          fi
